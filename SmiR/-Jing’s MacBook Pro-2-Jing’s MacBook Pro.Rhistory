install.packages("roxygen2")
library(SmiR)
?mirNrm
devtools::document()
library(SmiR)
?mirnrm
devtools::document()
library(SmiR)
?mirNrm
devtools::document()
library(SmiR)
?mirNrm
devtools::document()
library(SmiR)
?mirNrm
?plotSA
?plotMA
devtools::document()
library(SmiR)
?mirFit
devtools::document()
library(SmiR)
?mirPlot
devtools::document()
library(SmiR)
install.packages("httr")
devtools::install_github("jzhangc/git_SmiR_KBS/SmiR")
library(SmiR)
devtools::document()
devtools::document()
library(SmiR)
devtools::document()
library(SmiR)
?mirProcess
?read.fasta
require(seqinr) # fasta interface
?read.fasta
devtools::document()
library(SmiR)
devtools::document()
library(SmiR)
devtools::document()
devtools::document()
library(SmiR)
setwd("~/OneDrive/Storey lab/current_work/miRNA_pipeline/dataset/novel")
require(Rsamtools) # for indexing large fasta files
?indexFa
indexFa("/Volumnes/WD/transcriptome_pooled.fasta")
indexFa("~/Desktop/transcriptome/transcriptome_pooled.fasta")
tstref <- FaFile("~/Desktop/transcriptome/transcriptome_pooled.fasta") # import the index.
tstref
?pmatch
?getSeq
str(tstref)
?seqinfo
seqinfo(tstref)
?getSeq
?as
tstgr <- as(seqinfo(tstref), "GRanges")
str(tstgr)
names(gr)
names(tstgr)
getSeq(tstref, gr[SRR414930.23260105])
getSeq(tstref, tstgr[SRR414930.23260105])
idx <- pmatch("SRR414930.23260105", names(tstgr))  ## NA's if duplicates or not unique
getSeq(tstref, tstgr[idx])
idx
getSeq(tstref, tstgr[idx])
tstseq <- getSeq(tstref, tstgr[idx])
tstseq
names(tstseq)
tstseq[seq]
tstseq$SRR414930.23260105
str(tstseq)
rm(list=ls(all=TRUE))
######## load the packages
require(reshape2)
require(ggplot2)
require(gtable) # for duplicating y axis on the right side
require(grid) # for duplicating y axis on the right side
require(edgeR)
require(limma)
require(Rsamtools) # for indexing large fasta files
require(seqinr) # fasta interface
####### novel miRNA prediction
setwd("~/OneDrive/Storey lab/current_work/miRNA_pipeline/dataset/novel")
devtools::document()
library(SmiR)
devtools::document()
library(SmiR)
read.table(file.path(R.home(), "etc", "repositories"), sep = "\t")
devtools::session_info()
library("BiocInstaller", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:BiocInstaller", unload=TRUE)
rm(list=ls(all=TRUE))
######## load the packages
require(reshape2)
require(ggplot2)
require(gtable) # for duplicating y axis on the right side
require(grid) # for duplicating y axis on the right side
require(edgeR)
require(limma)
require(Rsamtools) # for indexing large fasta files
require(seqinr) # fasta interface
####### novel miRNA prediction
setwd("~/OneDrive/Storey lab/current_work/miRNA_pipeline/dataset/novel") # import file
requrie(SmiR)
require(SmiR)
tstraw <- mirProcessML()
tstraw
head(tstraw[[1]])
rm(tstraw)
system("ls | grep .txt > filenames") # call system conmand to extract the txt file name into a temporary file
inputDfm <- read.table(file = "filenames", stringsAsFactors = FALSE) # read the content of the
View(inputDfm)
system("rm filenames") # call system command to remove the temporary fle
colnames(inputDfm) <- "org.fileName"
View(inputDfm)
inputDfm$fileName <- sapply(inputDfm$org.fileName, function(x)unlist(strsplit(x, "\\."))[[1]], simplify = TRUE) # remove the extension of the file names
View(inputDfm)
inputDfm$targetType <- sapply(inputDfm$fileName, function(x)unlist(strsplit(x, "_"))[[3]], simplify =TRUE)
View(inputDfm)
inputDfm$targetType <- factor(inputDfm$targetType, levels = c(unique(inputDfm$targetType)))
inputDfm$experimentID <- sapply(inputDfm$fileName, function(x)unlist(strsplit(x, "_"))[[1]], simplify = TRUE)
View(inputDfm)
rm(list=ls(all=TRUE))
######## load the packages
require(reshape2)
require(ggplot2)
require(gtable) # for duplicating y axis on the right side
require(grid) # for duplicating y axis on the right side
require(edgeR)
require(limma)
require(Rsamtools) # for indexing large fasta files
require(seqinr) # fasta interface
setwd("~/OneDrive/Storey lab/current_work/miRNA_pipeline/dataset/novel") # import file
system("ls | grep .txt > filenames") # call system conmand to extract the txt file name into a temporary file
inputDfm <- read.table(file = "filenames", stringsAsFactors = FALSE) # read the content of the
system("rm filenames") # call system command to remove the temporary fle
colnames(inputDfm) <- "org.fileName"
inputDfm$fileName <- sapply(inputDfm$org.fileName, function(x)unlist(strsplit(x, "\\."))[[1]], simplify = TRUE) # remove the extension of the file names
inputDfm$targetType <- sapply(inputDfm$fileName, function(x)unlist(strsplit(x, "_"))[[3]], simplify =TRUE)
inputDfm$targetType <- factor(inputDfm$targetType, levels = c(unique(inputDfm$targetType)))
inputDfm$experimentID <- sapply(inputDfm$fileName, function(x)unlist(strsplit(x, "_"))[[1]], simplify = TRUE)
View(inputDfm)
rawLstML <- sapply(inputDfm$fileName, function(x){
temp <- read.table(file = paste(x, ".txt", sep=""), header = FALSE, stringsAsFactors = FALSE,
row.names = NULL)
temp <- temp[-1,]
colnames(temp)[1] <- "rawCount"
colnames(temp)[2] <- unlist(strsplit(x, "_"))[3]
row.names(temp) <- temp[,2]
temp$species <- sapply(temp[[2]], function(i)unlist(strsplit(i, "-"))[1], simplify = TRUE)
temp$miRNA_class <- sapply(temp[[2]], function(i)paste(unlist(strsplit(i, "-"))[2],
"-",
unlist(strsplit(i, "-"))[3],
sep = ""),
simplify = TRUE)
temp$species <- factor(temp$species, levels = c(unique(temp$species)))
temp$miRNA_class <- factor(temp$miRNA_class, levels = c(unique(temp$miRNA_class)))
return(temp)
}, simplify = FALSE, USE.NAMES = TRUE)
rm(rawLstML)
View(inputDfm)
inputDfm$fileName[1]
temp <- read.table(file = paste(inputDfm$fileName[1], ".txt", sep=""), header = FALSE, stringsAsFactors = FALSE,
row.names = NULL)
View(temp)
temp <- temp[-1,]
View(temp)
colnames(temp)[1] <- "rawCount"
View(temp)
colnames(temp)[2] <- unlist(strsplit(x, "_"))[3]
nlist(strsplit(inputDfm$fileName[1], "_"))[3]
unlist(strsplit(inputDfm$fileName[1], "_"))[3]
colnames(temp)[2]
unlist(strsplit(inputDfm$fileName[1], "_"))
devtools::document()
setwd("~/OneDrive/Storey lab/current_work/miRNA_pipeline/git_SmiR_KBS/SmiR")
devtools::document()
library(SmiR)
setwd("~/OneDrive/Storey lab/current_work/miRNA_pipeline/dataset/novel") # import file
colnames(temp)[2] <- unlist(strsplit(inputDfm$fileName[1], "_"))[2]
temp
head(temp)
row.names(temp)
temp[,2]
row.names(temp) <- temp[,2]
View(temp)
View(temp)
rawLstML <- sapply(inputDfm$fileName, function(x){
temp <- read.table(file = paste(x, ".txt", sep=""), header = FALSE, stringsAsFactors = FALSE,
row.names = NULL)
temp <- temp[-1,]
colnames(temp)[1] <- "rawCount"
colnames(temp)[2] <- unlist(strsplit(x, "_"))[3]
row.names(temp) <- temp[,2]
return(temp)
}, simplify = FALSE, USE.NAMES = TRUE)
str(rawLstML)
head(rawLstML[[1]])
rawLstML <- sapply(inputDfm$fileName, function(x){
temp <- read.table(file = paste(x, ".txt", sep=""), header = FALSE, stringsAsFactors = FALSE,
row.names = NULL)
temp <- temp[-1,]
colnames(temp)[1] <- "rawCount"
colnames(temp)[2] <- unlist(strsplit(x, "_"))[2]
row.names(temp) <- temp[,2]
return(temp)
}, simplify = FALSE, USE.NAMES = TRUE)
head(rawLstML[[1]])
names(rawLstML)
unique(sapply(names(rawLstML),
function(x)unlist(strsplit(x, "_"))[3], simplify = TRUE))
tgtType <- unique(sapply(names(rawLstML),
function(x)unlist(strsplit(x, "_"))[3], simplify = TRUE))
names(dataLst)
names(rawLstML)
mergedLst <- sapply(tgtType, function(x){
tempLst <- rawLstML[grep(x, names(rawLstML))]
Dfm <- Reduce(function(i, j)merge(i[, c(2, 4)], j[, c(2, 4)], by = names(i)[2], all = TRUE), tempLst)
names(Dfm)[-1] <- sapply(strsplit(names(tempLst), "_"), "[[", 1) # use the function "[[" and the argument ", 1" to select the first element of the list element
Dfm[is.na(Dfm) == TRUE] <- 0
Dfm <- unique(Dfm)
return(Dfm)
}, simplify = FALSE, USE.NAMES = TRUE)
mergedLst <- sapply(tgtType, function(x){
tempLst <- rawLstML[grep(x, names(rawLstML))]
Dfm <- Reduce(function(i, j)merge(i[, c(2, 4)], j[, c(2, 4)], by = "test", all = TRUE), tempLst)
names(Dfm)[-1] <- sapply(strsplit(names(tempLst), "_"), "[[", 1) # use the function "[[" and the argument ", 1" to select the first element of the list element
Dfm[is.na(Dfm) == TRUE] <- 0
Dfm <- unique(Dfm)
return(Dfm)
}, simplify = FALSE, USE.NAMES = TRUE)
rawLstML[[1]]$test
dfm <- rbind(rawLstML[[1]]$test, rawLstML[[2]]$test)
dfm <- rbind(rawLstML[[1]][2], rawLstML[[2]][2])
dfm <- as.matrix(dfm)
View(dfm)
head(dfm)
rawLstML[[1]][2]
dfm <- rbind(rawLstML[[1]][2], rawLstML[[2]][2])
View(dfm)
V <- dfm[,1]
V <- V[which(!V == 0)]
V <- dfm[,1]
V[which(!V == 0)]
V <- V[which(!V == 0)]
V <- unique(V)
View(inputDfm)
setwd("~/OneDrive/Storey lab/current_work/miRNA_pipeline/git_SmiR_KBS/SmiR")
devtools::document()
devtools::document()
library(SmiR)
devtools::document()
library(SmiR)
devtools::document()
library(SmiR)
devtools::install_github("jzhangc/git_SmiR_KBS/SmiR", repos = BiocInstaller::biocinstallRepos())
devtools::document()
setwd("~/OneDrive/Storey lab/current_work/miRNA_pipeline/git_SmiR_KBS/SmiR")
devtools::document()
library(SmiR)
devtools::document()
library(SmiR)
devtools::install_github("jzhangc/git_SmiR_KBS/SmiR", repos = BiocInstaller::biocinstallRepos())
require(BiocInstaller)
biocLite()
require(parallel)
detectCores()
?detectCores
?mclapply
setwd("~/OneDrive/Storey lab/current_work/miRNA_pipeline/dataset/novel") # import file
devtools::install_github("jzhangc/git_SmiR_KBS/SmiR", repos = BiocInstaller::biocinstallRepos())
devtools::document()
library(SmiR)
setwd("~/OneDrive/Storey lab/current_work/miRNA_pipeline/dataset/novel") # import file
tstLst <- mirProcessML()
hairpinTraining(tstLst)
rm(list=ls(all=TRUE))
tstLst <- mirProcessML()
hairpinTraining(tstLst)
devtools::install_github("jzhangc/git_SmiR_KBS/SmiR", repos = BiocInstaller::biocinstallRepos())
require(SmiR)
?hairpinSet
devtools::document()
library(SmiR)
devtools::document()
library(SmiR)
devtools::document()
library(SmiR)
install.packages("getPass")
require(getPass)
getPass()
?getPass
getPass()
getPass("123")
devtools::document()
library(SmiR)
setwd("~/OneDrive/Storey lab/current_work/miRNA_pipeline/dataset/novel") # import file
tstLst <- mirProcessML(setType = "test")
